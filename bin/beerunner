#!/usr/bin/env bash

# Passed an argument?
if [ "$#" -eq 0 ]
then
	echo "You need to pass a file"
	exit 1
fi

# Global variables
declare -gr FILE_NAME="$1"
declare -gr FILE_EXTANSION="${FILE_NAME//*.}"

# Global messages
declare -gr MESSAGE_END='End of program'
declare -gr MESSAGE_ERROR='An error occurred'

# Start subroutines to run the source code
function _c_lang {
	local std_version

	PS3='Please select your C version: '
	select opt in 'DEFAULT C VERSION' 'C99'
	do
		case "$opt" in
			'C99') std_version='-std=c99' ; break ;;
			'DEFAULT C VERSION') std_version='' ; break ;;
			*) echo "Invalid option: $REPLY" ;;
		esac
	done

	echo "Creating the bin directory to put the executable"
	eval "mkdir -p bin"
	echo "Compiling C source code"
	eval "gcc ${FILE_NAME} ${std_version} -O2 -lm -o bin/a.out" && {
		echo "Running the executable"
		eval "./bin/a.out"
	} || {
		echo "$MESSAGE_ERROR"
		exit 1
		}

	echo "$MESSAGE_END"
}

function _cs_lang {
	echo "Creating the bin directory to put the executable"
	eval "mkdir -p bin"
	echo "Compiling C# source code"
	eval "mcs ${FILE_NAME} -out:bin/a.out" && {
		echo "Running the executable"
		eval "./bin/a.out"
	} || {
		echo "$MESSAGE_ERROR"
		exit 1
	}

	echo "$MESSAGE_END"
}

function _cpp_lang {
	local std_version

	PS3='Please select your C++ version: '
	select opt in 'c++11' 'c++17'
	do
		case "$opt" in
			'c++11') std_version='-std=c++11' ; break ;;
			'c++17') std_version='-std=c++17' ; break ;;
			*) echo "Invalid option: $REPLY" ;;
		esac
	done

	echo "Creating the bin directory to put the executable"
	eval "mkdir -p bin"
	echo "Compiling C++ source code"
	eval "c++ ${FILE_NAME} ${std_version} -O2 -lm -o bin/a.out" && {
		echo "Running the executable"
		eval "./bin/a.out"
	} || {
		echo "$MESSAGE_ERROR"
		exit 1
	}

	echo "$MESSAGE_END"
}

function _clj_lang {
	echo "Interpreting and running Clojure source code" 
	eval "clojure ${FILE_NAME}" || {
		echo "$MESSAGE_ERROR"
		exit 1	
	}

	echo "$MESSAGE_END"
}

function _go_lang {
	echo "Compiling Go source code and running it"
	eval "go run ${FILE_NAME}" || {
		echo "$MESSAGE_ERROR"
		exit 1
	}

	echo "$MESSAGE_END"
}

function _hs_lang {
	echo "Compiling Haskell source code and running it"
	eval "runhaskell ${FILE_NAME}" || {
		echo "$MESSAGE_ERROR"
		exit 1
	}

	echo "$MESSAGE_END"
}

function _java_lang {
	echo "Compiling Java source code and running it"
	eval "java ${FILE_NAME}" || {
		echo "$MESSAGE_ERROR"
		exit 1
	}

	echo "$MESSAGE_END"
}

function _js_lang {
	echo "Interpreting and running the JavaScript source code"
	eval "node ${FILE_NAME}" || {
		echo "$MESSAGE_ERROR"
		exit 1
	}

	echo "$MESSAGE_END"
}

function _lua_lang {
	echo "Interpreting and running the Lua source code"
	eval "lua ${FILE_NAME}" || {
		echo "$MESSAGE_ERROR"
		exit 1
	}

	echo "$MESSAGE_END"
}

function _ml_lang {
	echo "Compiling OCaml source code and running it"
	eval "ocaml ${FILE_NAME}" || {
		echo "$MESSAGE_ERROR"
		exit 1
	}

	echo "$MESSAGE_END"
}

function _py_lang {
	local python_version

	PS3='Please select your Python version: '
	select opt in 'version 3' 'version 3.9'
	do
		case "$opt" in
			'version 3') python_version='3' ; break ;;
			'version 3.9') python_version='3.9' ; break ;;
			*) echo "Ivalid option: $REPLY" ;;
		esac
	done

	echo "Interpreting and running the Python source code"
	eval "python${python_version} ${FILE_NAME}" || {
		echo "$MESSAGE_ERROR"
		exit 1
	}

	echo "$MESSAGE_END"
}

# Main
case "$FILE_EXTANSION" in
	'c') _c_lang ;;
	'cs') _cs_lang ;;
	'cpp'|'cc') _cpp_lang ;;
	'clj') _clj_lang ;;
	'go') _go_lang ;;
	'hs') _hs_lang ;;
	'java') _java_lang ;;
	'js') _js_lang ;;
	'lua') _lua_lang ;;
	'ml') _ml_lang ;;
	'py'|'pyt') _py_lang ;;
	*) echo "File type not known or not supported" ; exit 1 ;;
esac
